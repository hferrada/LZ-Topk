# LZ-Topk
This code builds a A LZ-Compression based structure that solves the Top-k Retrieval problem.

Authors: Hector Ferrada and Gonzalo Navarro hferrada@dcc.uchile.cl, gnavarro@dcc.uchile.cl  

Description: This is a compressed full-text index to compute Top-k. The implementation is based on the method of Ferrada and Navarro [1] which which was extended, 
using the structures in [2], to give complete answers.
In that paper we use the sdsl-library of S. Gog to build bitvectors (https://github.com/simongog/sdsl-lite). Then, it is necessary to install sdsl-library to run this index.
This code also uses some basic functions which are in our small library called DRF_Utils64. Then you have to download it and compile it to run the index (https://github.com/hferrada/DRF_Utils64.git)

COMPILE, MAKE and LINKING
=========================
1.- Install sdsl-library. Download it from https://github.com/simongog/sdsl-lite and follow the specifications given there.  
2.- Install DRF_Utils64 library. Download it from https://github.com/simongog/sdsl-lite and follow the specifications given there.  
3.- Edit the Makefile file included in the folder 'LZ-Topk' and modify the next lines:  

In the line INCLUDES, you put the path of directory 'include' in where are the header files "divsufsort.h" and "divsufsort.h" and the directory sdsl with all header of the library. For example:  
INCLUDES=-I/home/hferrada/include/ -I/home/hferrada/drf/dir64/DRF_Utils64/includes/  
In the line LIB, you indicate the files generated by the libraries: libsdsl.a, libdivsufsort.a, libdivsufsort64.a and drflib64.a (include absolute paths). For example:  
LIB=/home/hferrada/lib/libsdsl.a /home/hferrada/lib/libdivsufsort.a /home/hferrada/lib/libdivsufsort64.a /home/hferrada/drf/dir64/DRF_Utils64/drflib64.a 

4.- Make: To make the index just execute the command 'make' and this will create the lib: 'topkLZ.a'.
5.- Use the index in your program linking the 'topkLZ.a' file and include the header "TopkLZ.h" in your sorce code.  
Execute: "make build_binary" to generate a binary file "buildTopkLZ" from the source file "buildTopkLZ.cpp" (included here as example).
'buildTopkLZ.cpp' creates the index given the parameters included in a config file, which is indicated in the call.  
Execute: "make load_binary" to generate a binary file "loadTopkLZ" from the source file "loadTopkLZ.cpp" (included here as example)
'loadTopkLZ.cpp' loads the index given the parameters included in the config file, which is indicated in the call.  

Config File example
===================
It is not necesary uses the files buildDL_Sada.cpp and loadDL_Sada.cpp to generate the binaries files. 
These are only examples. If you use them, then you need to modify the parameters in the config file. 
This is the format of that file, which includes two sections [GLOBALS] and [TOPK]:  
___________________________________________________________________________________________________________
[GLOBALS]
TRACE = 0 # 0: do not list the trace, 1: list the trace  
TEST = 1 # 0: do not run the test, 1: run the test  
N_REP = 100 # number of test and repetitions for experiments  
RUN_EXP = 1 # 0: do not run the experiments, 1: run the experiments  
MAX_M = 10 # The experiments run with initial lenght pattern, m=6, and increments this value in 4 until to reach to MAX_M. The test run from length attern m=1 to m=MAX_M and for each m value run N_REP repetitions  

[TOPK]
g = 32				# minimum length of document segments to store a topk list in a node. Maximum 8 bits
inputFile = /home/hferrada/text_data/DR/wikipedia_40.txt
filesInList = 1 	# 1: list of files (ome line = one file), 0: Unique file with all the documents of the collection  
lowercase = 0		# 1: transform the letters to lowercase
boundSymbol = 0 	# original symbol delimiter of documents when we read all documents in one file.  
cutDoc = 1 			# new symbol to separate documents 
dirStore = directory # the directory to save/load the data structure (files *.dls)  
dirResult = directory/prefix_ # the directory/prefix to save the results of the experiments as summary files  
pattFromFile = 0  # 0: random patterns, 1: paterns load from file (as in todoCL)
lowercase = 0		# 0: it does not change the patterns. 1: it converts the patterns to lowecase-patterns
___________________________________________________________________________________________________________


References
==========
Please, if you want to include this tool as part of your experiments, in your references include the paper above.
[1] H. Ferrada and G. Navarro. Efficient compressed indexing for approximate top-k string retrieval. 
In Proc. 21st International Symposium on String Processing and Information Retrieval (SPIRE), LNCS 8799, pages 18–30, 2014.

[2] H. Ferrada and G. Navarro. A Lempel-Ziv compressed structure for document listing. 
In Proc. 20th International Symposium on String Processing and Information Retrieval (SPIRE), LNCS 8214, pages 116–128, 2013.
